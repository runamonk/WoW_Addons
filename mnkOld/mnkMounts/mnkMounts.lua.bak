mnkMount = CreateFrame("Frame")
mnkMount.LDB = LibStub:GetLibrary("LibDataBroker-1.1")

BINDING_HEADER_MNKMOUNT = "mnkMount LDB"
BINDING_NAME_RANDOM_MOUNT = "Load random mount"

local libQTip = LibStub("LibQTip-1.0")
local libAG = LibStub("AceGUI-3.0")
local fConfig = nil
local Hotkey = ""

tblFly = {}
tblGround = {}
tblOther = {}

sFlying = nil
sGround = nil
sOther = nil;

function mnkMount:DoOnEvent(event)
  if event == "PLAYER_LOGIN" then
    mnkMount.LDB = LibStub("LibDataBroker-1.1"):NewDataObject("mnkMounts", {
        icon = "Interface\\Icons\\Ability_mount_blackpanther.blp",  
        type = "data source",
        OnEnter = mnkMount.DoOnEnter,
        OnClick = mnkMount.DoOnClick
      })
    
    Hotkey, _ = GetBindingKey("RANDOM_MOUNT");

    mnkMount.LDB.label = "Mounts"
    mnkMount.UpdateText()
  end
end

function mnkMount.DoOnEnter(self)
  
  local tooltip = libQTip:Acquire("mnkMountsToolTip", 1, "LEFT")
  self.tooltip = tooltip 

  tooltip:Clear()
 
  if table.getn(tblFly) > 0 then
    tooltip:AddHeader(Color(COLOR_GOLD).."Flying".." ("..table.getn(tblFly)..")")
    
    for i in pairs(tblFly) do 
      local y,x = tooltip:AddLine(string.format("|T%s:16|t %s", tblFly[i].mIcon, tblFly[i].mName))
      tooltip:SetLineScript(y, "OnMouseDown", mnkMount.DoOnMouseDown, tblFly[i].mID)           
    end
  end

  if (table.getn(tblGround) > 0) then
    if table.getn(tblFly) > 0 then
      tooltip:AddHeader(" ")
    end
    
    tooltip:AddHeader(Color(COLOR_GOLD).."Ground".." ("..table.getn(tblGround)..")")

    for i in pairs(tblGround) do
      local y,x = tooltip:AddLine(string.format("|T%s:16|t %s", tblGround[i].mIcon, tblGround[i].mName))
      tooltip:SetLineScript(y, "OnMouseDown", mnkMount.DoOnMouseDown, tblGround[i].mID)
    end          
  end
   
  if table.getn(tblOther) > 0 then
    if (table.getn(tblFly) > 0) or (table.getn(tblGround) > 0) then
      tooltip:AddHeader(" ")
    end

    tooltip:AddHeader(Color(COLOR_GOLD).."Other".." ("..table.getn(tblOther)..")")
    
    for i in pairs(tblOther) do
      local y,x = tooltip:AddLine(string.format("|T%s:16|t %s", tblOther[i].mIcon, tblOther[i].mName))
      tooltip:SetLineScript(y, "OnMouseDown", mnkMount.DoOnMouseDown, tblOther[i].mID)      
    end
  end  

  if (table.getn(tblFly) == 0) and (table.getn(tblGround) == 0) and (table.getn(tblOther) == 0) then
    tooltip:AddLine(Color(COLOR_GOLD).."No mounts flagged as favorite.");
    tooltip:AddLine(Color(COLOR_GOLD).."Right click on mnkMounts icon to open config."); 
  end  
  tooltip:SetAutoHideDelay( .1, self )
  tooltip:SmartAnchorTo(self)
  tooltip:Show() 
 end

function mnkMount.DoOnClick(self, button)
  if button == "RightButton" then
    if fConfig ~= nil then
      return
    end

    fConfig = libAG:Create("Frame")
    fConfig:SetCallback("OnClose", mnkMount.DoOnConfigClose)
    fConfig:SetTitle("mnkMounts Favorite Mounts")
    fConfig:SetStatusText("Check all your favorite mounts.")
    fConfig:SetLayout("Custom_Layout")
    fConfig:SetHeight(500)
    fConfig:SetWidth(782)
    fConfig:EnableResize(false)
    fConfig:PauseLayout()

    sGround = mnkMount.AddGroup(fConfig, "Ground", -2)
    sFlying = mnkMount.AddGroup(fConfig, "Flying", 250)
    sOther = mnkMount.AddGroup(fConfig, "Other", 502)

    for i = 1, GetNumCompanions("MOUNT") do
      local mID, mName, mSpellID, mIcon, _, mType = GetCompanionInfo("MOUNT", i)    
      
      if bit.band(3, mType) == 3 then    
        mnkMount.AddCheckbox(sFlying, mnkMount.MountInTable(tblFly, mID), mID, mName, mIcon, mSpellID)
      
      elseif bit.band(3, mType) == 1 then
        mnkMount.AddCheckbox(sGround, mnkMount.MountInTable(tblGround, mID), mID, mName, mIcon, mSpellID)
      
      elseif bit.band(3, mType) == 0 then
        mnkMount.AddCheckbox(sOther, mnkMount.MountInTable(tblOther, mID), mID, mName, mIcon, mSpellID) 
      end
    end

    l = libAG:Create("Label")
    l:SetText("Summon random mount hotkey")
    fConfig:AddChild(l)
    l:SetPoint("BOTTOMLEFT", 5, 13)

    k = libAG:Create("Keybinding")
    k:SetCallback("OnKeyChanged", mnkMount.DoOnHotkeyChanged)
    k:SetKey(Hotkey)
    fConfig:AddChild(k)
    k:SetPoint("BOTTOMLEFT", 160, 7)    
    fConfig:ResumeLayout()
  elseif button == "LeftButton" then
    TogglePetJournal(1);
  end
end

function mnkMount.AddCheckbox(scrollbox, checked, mID, mName, mIcon, mSpellID)
  local c = libAG:Create("CheckBox")
  c:SetValue(checked)
  c:SetCallback("OnValueChanged", mnkMount.DoCheckOnClick)
  c:SetLabel(string.format("|T%s:16|t %s", mIcon, mName))
  c:SetUserData("mID", mID)
  c:SetUserData("mName", mName)
  c:SetUserData("mIcon", mIcon)
  c:SetUserData("mSpellID", mSpellID)
  scrollbox:AddChild(c)      
end

function mnkMount.AddGroup(frame, title, pos)
  local g = libAG:Create("InlineGroup")
  frame:AddChild(g)

  g:SetTitle(title)
  g:SetFullWidth(false)
  g:SetFullHeight(false)

  g:SetHeight(400) 
  g:SetWidth(250)
  g:SetLayout("Custom_Layout")
  g:SetPoint("TOPLEFT", pos, 0)

  local s = libAG:Create("ScrollFrame")
  g:AddChild(s)
  s:SetPoint("TOPLEFT", 0,0)
  s:SetHeight(g.frame.height-45)
  s:SetWidth(g.frame.width-20)
  s:SetLayout("List")
  return s
end

function mnkMount.DoOnConfigClose(frame)
  mnkMount.UpdateTable(tblFly, sFlying)
  mnkMount.UpdateTable(tblGround, sGround)
  mnkMount.UpdateTable(tblOther, sOther)
  mnkMount.UpdateText()

  SetBinding(Hotkey, "RANDOM_MOUNT")
  SaveBindings(2)

  libAG:Release(frame)
  fConfig = nil
end

function mnkMount.DoCheckOnClick(self, event, value)

end

function mnkMount.DoOnHotkeyChanged(self, event, key)
  Hotkey = key
end

function mnkMount.DoOnMouseDown(button, arg)
  CallCompanion("MOUNT", mnkMount.GetMountIndex(arg))
end

function mnkMount.DoRandomMount()

  if IsMounted() then
    Dismount()
  else  
    if mnkMount.CanUseOther() then
      local m = math.random(1,table.getn(tblOther))     
      CallCompanion("MOUNT", mnkMount.GetMountIndex(tblOther[m].mID))
      return
    end
    if mnkMount.CanUseFlying() then
      local m = math.random(1,table.getn(tblFly))     
      CallCompanion("MOUNT", mnkMount.GetMountIndex(tblFly[m].mID))
      return
    end
    if mnkMount.CanUseGround() then
      local m = math.random(1,table.getn(tblGround))   
      CallCompanion("MOUNT", mnkMount.GetMountIndex(tblGround[m].mID))
      return      
    end
  end 
 end

function mnkMount.CanCastSpell(spellid)
  -- there is a bug with IsUsableSpell(), sometimes it will return true when it should not.
  local bCan = IsUsableSpell(spellid)
  
  --75207 is the seahorse mount for vash zone only
  if bCan and spellid == 75207 and mnkMount.InVashZone() == false then
    return false  
  end

  return bCan  
end

function mnkMount.CanUseFlying()
  if (table.getn(tblFly) == 0) or IsFlyableArea() == nil then
    return false
  else
    return true
  end
end

function mnkMount.CanUseGround()
  if (table.getn(tblGround) == 0) then
    return false
  else
    return mnkMount.CanCastSpell(tblGround[1].mSpellID)
  end
end

function mnkMount.CanUseOther()
  if (table.getn(tblOther) == 0) then
    return false
  else
    return mnkMount.CanCastSpell(tblOther[1].mSpellID)
  end
end

function mnkMount.GetMountIndex(id)
  for i = 1, GetNumCompanions("MOUNT") do
    local mID, _, _, _, _ = GetCompanionInfo("MOUNT", i)
    if mID == id then
      return i
    end
  end     
end

function mnkMount.InVashZone()
  local id = GetCurrentMapAreaID()
  local result = ((id == 610) or (id == 613) or (id == 614) or (id == 615))
  return result
end

function mnkMount.MountInTable(t, id)
  local result = false
  for i=1, #t do
    if t[i].mID == id then
      result = true
    end
  end
  return result
end

function mnkMount.UpdateTable(t, scrollbox)
  table.wipe(t)
  
  local x = 0
  for i=1, #scrollbox.children do
    if scrollbox.children[i]:GetValue() == true then
      x=(x+1)
      t[x] = {}
      t[x].mID = scrollbox.children[i]:GetUserData("mID")
      t[x].mName = scrollbox.children[i]:GetUserData("mName")
      t[x].mSpellID = scrollbox.children[i]:GetUserData("mSpellID")
      t[x].mIcon = scrollbox.children[i]:GetUserData("mIcon")
    end
  end  
end

function mnkMount.UpdateText()
  mnkMount.LDB.text = #tblFly+#tblGround+#tblOther
end



mnkMount:SetScript("OnEvent", mnkMount.DoOnEvent)
mnkMount:RegisterEvent("PLAYER_LOGIN")
mnkMount:RegisterEvent("PLAYER_ENTERING_WORLD")
--mnkMount:RegisterEvent("ADDON_LOADED")
--mnkMount:RegisterEvent("COMPANION_LEARNED")

